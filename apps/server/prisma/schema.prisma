// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement()) // Unique user ID
  oauth_id   String   @unique // OAuth provider ID (e.g., Google, GitHub)
  name       String? // User's name (optional for anonymous users)
  email      String   @unique // User's email
  avatar     String? // URL to the user's avatar
  created_at DateTime @default(now()) // Timestamp of account creation
  rooms      Room[] // Rooms created by the user
}

model Room {
  id          String     @id @default(uuid()) // Unique room ID (UUID)
  name        String // Room name
  creator_id  Int // User who created the room
  creator     User       @relation(fields: [creator_id], references: [id], onDelete: Cascade) // Relation to User
  expire_date DateTime // Room expiration date
  created_at  DateTime   @default(now()) // Timestamp of room creation
  questions   Question[] // Questions in the room
  Answer      Answer[]
}

model Question {
  id          String   @id @default(uuid()) // Unique question ID
  room_id     String // Room the question belongs to
  room        Room     @relation(fields: [room_id], references: [id], onDelete: Cascade) // Relation to Room
  content     String // Question content
  sender_name String? // Optional sender name (can be anonymous)
  upvotes     Int      @default(0) // Number of upvotes
  downvotes   Int      @default(0) // Number of downvotes
  answers     Answer[] // Answers to the question
  created_at  DateTime @default(now()) // Timestamp of question creation
}

model Answer {
  id          String   @id @default(uuid()) // Unique answer ID
  room_id     String // Room where the answer was given
  room        Room     @relation(fields: [room_id], references: [id], onDelete: Cascade) // Relation to Room
  question_id String // Question being answered
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade) // Relation to Question
  content     String // Answer content
  created_at  DateTime @default(now()) // Timestamp of answer creation
}
